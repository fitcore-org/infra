services:

  analytics-consumer:
    build: ../analytics-consumer
    depends_on:
      postgres-analytics:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      QUEUES: ${QUEUES}
      DB_NAME: ${ANALYTICS_DB_NAME}
      DB_USER: ${ANALYTICS_DB_USER}
      DB_PASS: ${ANALYTICS_DB_PASS}
      DB_HOST: postgres-analytics
    healthcheck:
      test: ["CMD", "echo", "ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  user-service:
    build: 
      context: ../user-service
      dockerfile: Dockerfile
    depends_on:
      analytics-consumer:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend

#  auth-service:
#    build: ../auth-service
#    ports:
#      - "3002:3000"
#    labels:
#      - "metrics_path=/metrics"
#    networks:
#      - backend
  postgres:
    image: postgres:15
    container_name: fitcore-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fitcore -d auth"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
  
  postgres-analytics:
    image: postgres:15
    container_name: fitcore-postgres-analytics
    restart: unless-stopped
    ports:
      # Mapeamos para uma porta diferente no host para evitar conflito com a porta 5432
      - "5433:5432"
    environment:
      POSTGRES_USER: ${ANALYTICS_DB_USER}
      POSTGRES_PASSWORD: ${ANALYTICS_DB_PASS}
      POSTGRES_DB: ${ANALYTICS_DB_NAME}
      # A configuração chave para compatibilidade com o Grafana
      POSTGRES_HOST_AUTH_METHOD: "md5"
    volumes:
      # Um volume separado para os dados de analytics
      - postgres_analytics_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d analytics_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: fitcore-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: fitcore-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"     # queue
      - "15672:15672"   # UI web
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: fitcore-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Painel
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    volumes:
      - minio_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 3

  minio-init:
    image: quay.io/minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "sleep 15 && \
        mc alias set local http://minio:9000 ${MINIO_USER} ${MINIO_PASS} && \
        \
        mc mb local/fitcore-users-profile || true && \
        mc anonymous set public local/fitcore-users-profile && \
        echo 'Bucket policy (users-profile):' && \
        mc anonymous get local/fitcore-users-profile && \
        \
        mc mb local/fitcore-exercises || true && \
        mc anonymous set public local/fitcore-exercises && \
        echo 'Bucket policy (exercises):' && \
        mc anonymous get local/fitcore-exercises"
    networks:
      - backend
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:10.4.1
    user: root
    ports:
      - "3000:3000"
    depends_on:
      postgres-analytics:
        condition: service_healthy
      prometheus:
        condition: service_started 
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - ANALYTICS_DB_USER=${ANALYTICS_DB_USER}
      - ANALYTICS_DB_PASS=${ANALYTICS_DB_PASS}
      - ANALYTICS_DB_NAME=${ANALYTICS_DB_NAME}

      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=debug
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - backend

networks:
  backend:

volumes:
  postgres_data:
  postgres_analytics_data:
  rabbitmq_data:
  minio_data:
