version: "3.8"

services:
  
  user-service:
    build: 
      context: ../user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - backend

#  auth-service:
#    build: ../auth-service
#    ports:
#      - "3002:3000"
#    labels:
#      - "metrics_path=/metrics"
#    networks:
#      - backend
  postgres:
    image: postgres:15
    container_name: fitcore-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: fitcore-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"     # queue
      - "15672:15672"   # UI web
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: fitcore-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Painel
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    volumes:
      - minio_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 3

  minio-init:
    image: quay.io/minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "sleep 15 && \
        mc alias set local http://minio:9000 ${MINIO_USER} ${MINIO_PASS} && \
        mc mb local/fitcore-users-profile || true && \
        mc anonymous set public local/fitcore-users-profile && \
        echo 'Bucket policy status:' && \
        mc anonymous get local/fitcore-users-profile"
    networks:
      - backend
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend

networks:
  backend:

volumes:
  postgres_data:
  rabbitmq_data:
  minio_data:
