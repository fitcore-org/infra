services:

  analytics-consumer:
    build: 
      context: ../analytics-consumer
      dockerfile: Dockerfile
    container_name: fitcore-analytics-consumer
    restart: unless-stopped
    profiles:
      - analytics
      - full
    depends_on:
      postgres-analytics:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      QUEUES: ${QUEUES}
      DB_NAME: ${ANALYTICS_DB_NAME}
      DB_USER: ${ANALYTICS_DB_USER}
      DB_PASS: ${ANALYTICS_DB_PASS}
      DB_HOST: postgres-analytics
      DB_PORT: 5432
    healthcheck:
      test: ["CMD", "python", "-c", "import psycopg2; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - backend
  
  finance-service:
    build: 
      context: ../finance-service
      dockerfile: Dockerfile
    container_name: fitcore-finance-service
    restart: unless-stopped
    profiles:
      - core
      - full
    environment:
      POSTGRES_HOST: postgres-analytics
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${ANALYTICS_DB_USER}
      POSTGRES_PASSWORD: ${ANALYTICS_DB_PASS}
      POSTGRES_DB: ${ANALYTICS_DB_NAME}
      RABBITMQ_ENABLED: "true"
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
  
  ai-service:
    build: 
      context: ../ai-service
      dockerfile: Dockerfile
    container_name: fitcore-ai-service
    profiles:
      - analytics
      - core
      - full
    environment:
      - RUN_VALIDATE_ON_STARTUP=true
      - ANALYTIC_DATABASE_URL=${ANALYTIC_DATABASE_URL}
    depends_on:
      postgres-analytics:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    networks:
      - backend

  user-service:
    build: 
      context: ../user-service
      dockerfile: Dockerfile
    container_name: fitcore-user-service
    restart: unless-stopped
    profiles:
      - core
      - full
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_EXTERNAL_URL: ${MINIO_EXTERNAL_URL}
      MINIO_ACCESS_KEY: ${MINIO_USER}
      MINIO_SECRET_KEY: ${MINIO_PASS}
      USER_SEEDING_ENABLED: ${USER_SEEDING_ENABLED:-false}
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - backend

  auth-service:
    build: 
      context: ../auth-service
      dockerfile: Dockerfile
    container_name: fitcore-auth-service
    restart: unless-stopped
    profiles:
      - core
      - full
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    ports:
      - "8084:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - backend

  training-service:
    build: 
      context: ../training-service
      dockerfile: Dockerfile
    container_name: fitcore-training-service
    restart: unless-stopped
    profiles:
      - core
      - full
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_EXTERNAL_URL: ${MINIO_EXTERNAL_URL}
      MINIO_ACCESS_KEY: ${MINIO_USER}
      MINIO_SECRET_KEY: ${MINIO_PASS}
      DEEPL_API_KEY: ${DEEPL_API_KEY}
      TRANSLATION_ENABLED: ${TRANSLATION_ENABLED}
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - backend
    
  eureka:
    image: steeltoeoss/eureka-server:latest
    container_name: eureka
    ports:
      - "8761:8761"
    environment:
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: "false"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/eureka"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend


  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    container_name: fitcore-api-gateway
    restart: unless-stopped
    profiles:
      - core
      - full
    depends_on:
      - eureka-server
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - backend

  eureka-server:
    image: steeltoeoss/eureka-server:4.1.1
    container_name: fitcore-eureka-server
    restart: unless-stopped
    profiles:
      - core
      - full
    ports:
      - "8761:8761"
    networks:
      - backend

  payment-service:
    build:
      context: ../payment-service
      dockerfile: Dockerfile
    container_name: fitcore-payment-service
    restart: unless-stopped
    profiles:
      - core
      - full
    depends_on:
      - rabbitmq
      - postgres
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_HOST: rabbitmq
      MINIO_USER: ${MINIO_USER}
      MINIO_PASS: ${MINIO_PASS}
      MINIO_URL: http://minio:9000/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      PAGARME_API_KEY: ${PAGARME_API_KEY}
    ports:
      - "8083:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - backend

  postgres:
    image: postgres:15-alpine
    container_name: fitcore-postgres
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
  
  postgres-analytics:
    image: postgres:15-alpine
    container_name: fitcore-postgres-analytics
    restart: unless-stopped
    profiles:
      - analytics
      - full
    ports:
      - "5433:5432" # Porta externa diferente
    environment:
      POSTGRES_USER: ${ANALYTICS_DB_USER}
      POSTGRES_PASSWORD: ${ANALYTICS_DB_PASS}
      POSTGRES_DB: ${ANALYTICS_DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_analytics_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ANALYTICS_DB_USER} -d ${ANALYTICS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: fitcore-rabbitmq
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: fitcore-minio
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    volumes:
      - minio_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  minio-init:
    image: quay.io/minio/mc
    container_name: fitcore-minio-init
    profiles:
      - infrastructure
      - core
      - full
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "sleep 15 && \
        mc alias set local http://minio:9000 ${MINIO_USER} ${MINIO_PASS} && \
        \
        mc mb local/fitcore-users-profile || true && \
        mc anonymous set public local/fitcore-users-profile && \
        echo 'Bucket policy (users-profile):' && \
        mc anonymous get local/fitcore-users-profile && \
        \
        mc mb local/fitcore-exercises || true && \
        mc anonymous set public local/fitcore-exercises && \
        echo 'Bucket policy (exercises):' && \
        mc anonymous get local/fitcore-exercises"
    networks:
      - backend
  
  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: fitcore-prometheus
    restart: unless-stopped
    profiles:
      - analytics
      - full
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:10.4.1
    container_name: fitcore-grafana
    restart: unless-stopped
    user: root
    profiles:
      - analytics
      - full
    ports:
      - "3000:3000"
    depends_on:
      postgres-analytics:
        condition: service_healthy
      #prometheus:
      #  condition: service_started 
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=volkovlabs-echarts-panel,grafana-clock-panel,grafana-simple-json-datasource
      - ANALYTICS_DB_USER=${ANALYTICS_DB_USER}
      - ANALYTICS_DB_PASS=${ANALYTICS_DB_PASS}
      - ANALYTICS_DB_NAME=${ANALYTICS_DB_NAME}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - backend

networks:
  backend:

volumes:
  postgres_data:
  postgres_analytics_data:
  rabbitmq_data:
  minio_data:
  prometheus_data:
  grafana_data:
