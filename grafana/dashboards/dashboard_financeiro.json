{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fitcore_postgres_ds"
      },
      "gridPos": {
        "h": 10,
        "w": 5,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const formatCurrency = (value) => {\n  if (value === null || isNaN(value)) return 'R$ 0,00';\n  return 'R$ ' + value.toFixed(2).replace('.', ',');\n};\n\nconst value = context?.panel?.data?.series?.[0]?.fields?.[0]?.values?.[0] ?? 0;\nconst width = context?.width ?? 300;\nconst fontSize = Math.max(16, width * 0.20); // Responsivo\n\nreturn {\n  backgroundColor: 'transparent',\n  title: {\n    text: 'Receita do Mês',\n    left: 'center',\n    top: '10%',\n    textStyle: {\n      color: '#EEEEEE',\n      fontSize: 16,\n      fontWeight: 'bold'\n    }\n  },\n  graphic: [{\n    id: 'mainValue',\n    type: 'text',\n    left: 'center',\n    top: 'center',\n    style: {\n      text: formatCurrency(value),\n      font: `bold ${fontSize}px Inter, Roboto, sans-serif`,\n      fill: '#E5E7EB', // Cinza claro\n      textAlign: 'center',\n      textVerticalAlign: 'middle'\n    }\n  }]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "7.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT total_revenue\r\nFROM profit\r\nWHERE period_end >= date_trunc('month', CURRENT_DATE);\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fitcore_postgres_ds"
      },
      "gridPos": {
        "h": 10,
        "w": 5,
        "x": 5,
        "y": 0
      },
      "id": 5,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const formatCurrency = (value) => {\n  if (value === null || isNaN(value)) return 'R$ 0,00';\n  return 'R$ ' + value.toFixed(2).replace('.', ',');\n};\n\nconst value = context?.panel?.data?.series?.[0]?.fields?.[0]?.values?.[0] ?? 0;\nconst width = context?.width ?? 300;\nconst fontSize = Math.max(16, width * 0.20); // Responsivo\n\nreturn {\n  backgroundColor: 'transparent',\n  title: {\n    text: 'Despesa do Mês',\n    left: 'center',\n    top: '10%',\n    textStyle: {\n      color: '#EEEEEE',\n      fontSize: 16,\n      fontWeight: 'bold'\n    }\n  },\n  graphic: [{\n    id: 'mainValue',\n    type: 'text',\n    left: 'center',\n    top: 'center',\n    style: {\n      text: formatCurrency(value),\n      font: `bold ${fontSize}px Inter, Roboto, sans-serif`,\n      fill: 'rgba(239, 68, 68, 1)', // Vermelho\n      textAlign: 'center',\n      textVerticalAlign: 'middle'\n    }\n  }]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "7.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT total_expenses\r\nFROM profit\r\nWHERE period_end >= date_trunc('month', CURRENT_DATE);\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fitcore_postgres_ds"
      },
      "gridPos": {
        "h": 10,
        "w": 5,
        "x": 10,
        "y": 0
      },
      "id": 6,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const formatCurrency = (value) => {\n  if (value === null || isNaN(value)) return 'R$ 0,00';\n  return 'R$ ' + value.toFixed(2).replace('.', ',');\n};\n\nconst value = context?.panel?.data?.series?.[0]?.fields?.[0]?.values?.[0] ?? 0;\nconst width = context?.width ?? 300;\nconst fontSize = Math.max(16, width * 0.20); // Responsivo\n\nreturn {\n  backgroundColor: 'transparent',\n  title: {\n    text: 'Lucro Líquido do Mês',\n    left: 'center',\n    top: '10%',\n    textStyle: {\n      color: '#EEEEEE',\n      fontSize: 16,\n      fontWeight: 'bold'\n    }\n  },\n  graphic: [{\n    id: 'mainValue',\n    type: 'text',\n    left: 'center',\n    top: 'center',\n    style: {\n      text: formatCurrency(value),\n      font: `bold ${fontSize}px Inter, Roboto, sans-serif`,\n      fill: value >= 0 ? 'rgba(34, 197, 94, 1)' : 'rgba(239, 68, 68, 1)', // Verde ou vermelho\n      textAlign: 'center',\n      textVerticalAlign: 'middle'\n    }\n  }]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "7.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  net_profit\r\nFROM\r\n  profit\r\n-- Ordena pela data de fim do período para garantir que o mais recente venha primeiro\r\nORDER BY\r\n  period_end DESC\r\n-- Pega apenas a primeira linha, que é a do mês mais recente\r\nLIMIT 1;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fitcore_postgres_ds"
      },
      "gridPos": {
        "h": 10,
        "w": 9,
        "x": 15,
        "y": 0
      },
      "id": 3,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const frame = context.panel.data.series[0];\nconst width = context?.width ?? 300;\nconst height = context?.height ?? 200;\n\n// Responsividade para fontes e barra\nconst baseFontSize = Math.max(12, width * 0.04); // Ex: 4% da largura, mínimo 12px\nconst barWidth = Math.min(40, Math.max(20, height * 0.20)); // Ex: 8% da altura, mínimo 12px\n\nconst categories = frame.fields.find(f => f.name === 'Descrição').values;\nconst values = frame.fields.find(f => f.name === 'Total Gasto').values;\n\nreturn {\n  backgroundColor: 'transparent',\n  title: {\n    text: 'Top 5 Despesas do Mês',\n    left: 'center',\n    textStyle: { color: '#EEEEEE', fontSize: baseFontSize }\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'shadow' },\n    formatter: '{b}: R$ {c}'\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    top: '15%',\n    bottom: '5%',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'value',\n    axisLabel: {\n      color: '#ccc',\n      fontSize: baseFontSize * 0.9,\n      formatter: 'R$ {value}'\n    },\n    splitLine: {\n      lineStyle: { color: '#444' }\n    }\n  },\n  yAxis: {\n    type: 'category',\n    data: categories,\n    axisLabel: {\n      color: '#ccc',\n      fontSize: baseFontSize\n    }\n  },\n  series: [{\n    name: 'Total Gasto',\n    type: 'bar',\n    barWidth: barWidth,\n    label: {\n      show: true,\n      position: 'right',\n      formatter: 'R$ {c}',\n      color: '#fff',\n      fontSize: baseFontSize * 0.9\n    },\n    itemStyle: {\n      color: {\n        type: 'linear', x: 0, y: 0, x2: 1, y2: 0,\n        colorStops: [\n          { offset: 0, color: 'rgba(34, 197, 94, 0.4)' },\n          { offset: 1, color: 'rgba(34, 197, 94, 1)' }\n        ]\n      }\n    },\n    data: values\n  }]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "7.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  description AS \"Descrição\",\r\n  SUM(amount) AS \"Total Gasto\"\r\nFROM expenses\r\n-- Filtra para pegar despesas a partir do primeiro dia do mês atual\r\nWHERE expense_date >= date_trunc('month', CURRENT_DATE)\r\nGROUP BY \"Descrição\"\r\nORDER BY \"Total Gasto\" DESC\r\nLIMIT 5;\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fitcore_postgres_ds"
      },
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 2,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// 1. Acessa os dados da query\nconst frame = context.panel.data.series[0];\n\n// 2. Extrai os campos pelos nomes definidos na query\nconst categories = frame.fields.find(f => f.name === 'Mês').values;\nconst revenueValues = frame.fields.find(f => f.name === 'Receita Total').values;\nconst expenseValues = frame.fields.find(f => f.name === 'Despesa Total').values;\nconst profitValues = frame.fields.find(f => f.name === 'Lucro Líquido').values;\n\n// 3. Define as cores do nosso padrão visual\nconst revenueColor = '#22C55E'; // Verde\nconst expenseColor = '#FBBF24'; // Amarelo/Laranja\nconst profitColor = '#E5E7EB';  // Branco/Cinza claro\n\n// 4. Retorna a configuração do ECharts\nreturn {\n  backgroundColor: 'transparent',\n  title: {\n    text: 'Desempenho Financeiro no Último ano',\n    left: 'center',\n    textStyle: { color: '#EEEEEE', fontSize: 16 }\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'cross' }\n  },\n  legend: {\n    data: ['Receita Total', 'Despesa Total', 'Lucro Líquido'],\n    bottom: 10,\n    left: 'center',\n    textStyle: { color: '#ccc' }\n  },\n  grid: { left: '3%', right: '4%', top: '20%', bottom: '15%', containLabel: true },\n  xAxis: {\n    type: 'category',\n    data: categories,\n    axisPointer: { type: 'shadow' },\n    axisLabel: { color: '#ccc' }\n  },\n  yAxis: {\n    type: 'value',\n    name: 'Valor (R$)',\n    axisLabel: { color: '#ccc', formatter: 'R$ {value}' }\n  },\n  series: [\n    {\n      name: 'Receita Total',\n      type: 'bar',\n      itemStyle: { color: revenueColor },\n      data: revenueValues\n    },\n    {\n      name: 'Despesa Total',\n      type: 'bar',\n      itemStyle: { color: expenseColor },\n      data: expenseValues\n    },\n    {\n      name: 'Lucro Líquido',\n      type: 'line',\n      smooth: true,\n      symbol: 'none',\n      lineStyle: { width: 3, color: profitColor },\n      data: profitValues\n    }\n  ]\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "7.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  -- Formata a data para aparecer como 'Ago/2025' no gráfico\r\n  to_char(period_end, 'Mon/YYYY') AS \"Mês\",\r\n  total_revenue AS \"Receita Total\",\r\n  total_expenses AS \"Despesa Total\",\r\n  net_profit AS \"Lucro Líquido\"\r\nFROM\r\n  profit\r\nWHERE\r\n  -- ESTA É A LINHA ADICIONADA:\r\n  -- Filtra os dados para pegar apenas registros dos últimos 12 meses a partir de hoje.\r\n  period_end >= NOW() - INTERVAL '12 months'\r\n-- Garante que os dados mais antigos venham primeiro\r\nORDER BY\r\n  period_end ASC;\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "fitcore_postgres_ds"
      },
      "gridPos": {
        "h": 13,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 1,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const forecastFrame = context.panel.data.series.find(s => s.refId === 'A');\nconst lastProfitFrame = context.panel.data.series.find(s => s.refId === 'B');\n\n// Se os dados ainda não carregaram, exibe uma mensagem\nif (!forecastFrame || !lastProfitFrame) {\n  return { title: { text: 'Aguardando dados das queries A e B...' } };\n}\n\n// Pega os campos necessários da query de previsão\nconst timeField = forecastFrame.fields.find(f => f.type === 'time');\nconst predictedField = forecastFrame.fields.find(f => f.name === 'Lucro Previsto');\nconst lowerField = forecastFrame.fields.find(f => f.name === 'Limite Inferior');\nconst upperField = forecastFrame.fields.find(f => f.name === 'Limite Superior');\n\n// Extrai os valores para variáveis\nconst timeValues = timeField.values.buffer || timeField.values;\nconst predictedValues = predictedField.values.buffer || predictedField.values;\nconst lowerValues = lowerField.values.buffer || lowerField.values;\nconst upperValues = upperField.values.buffer || upperField.values;\nconst lastActualProfit = (lastProfitFrame.fields[0].values.buffer || lastProfitFrame.fields[0].values)[0];\n\n// ===================================================================================\n// 2. DEFINIÇÃO DAS SÉRIES DO GRÁFICO\n// ===================================================================================\nconst forecastColor = '#22C55E'; // Verde padrão\nconst referenceColor = '#FBBF24'; // Amarelo/dourado para a referência\n\n// --- Série da Área de Confiança (Sombreado Verde) ---\nconst confidenceAreaSeries = {\n  name: 'Intervalo de Confiança',\n  type: 'line',\n  stack: 'confidence', // Agrupa com a base para criar a área\n  symbol: 'none',\n  lineStyle: { opacity: 0 },\n  areaStyle: { color: 'rgba(34, 197, 94, 0.2)' }, // Verde com transparência\n  data: timeValues.map((t, i) => [t, upperValues[i] - lowerValues[i]])\n};\n// Base invisível para a área de confiança\nconst confidenceBaseSeries = {\n  name: 'Base do Intervalo',\n  type: 'line',\n  stack: 'confidence',\n  symbol: 'none',\n  lineStyle: { opacity: 0 },\n  data: timeValues.map((t, i) => [t, lowerValues[i]])\n};\n\n// --- Série da Linha de Referência (Tracejada) ---\nconst referenceLineSeries = {\n  name: 'Último Lucro Real',\n  type: 'line',\n  symbol: 'none',\n  lineStyle: { type: 'dashed', width: 2, color: referenceColor },\n  data: timeValues.map(t => [t, lastActualProfit])\n};\n\n// --- Série da Previsão (Linha Verde Única) ---\nconst predictionSeries = {\n  name: 'Lucro Previsto',\n  type: 'line',\n  smooth: true,\n  showSymbol: false,\n  lineStyle: { width: 3, color: forecastColor },\n  data: timeValues.map((t, i) => [t, predictedValues[i]])\n};\n\n// ===================================================================================\n// 3. CONFIGURAÇÃO FINAL DO GRÁFICO\n// ===================================================================================\nreturn {\n  backgroundColor: 'transparent',\n  title: {\n    text: 'Previsão de Lucro Líquido',\n    subtext: `Referência: Último lucro real de R$ ${lastActualProfit.toFixed(2)}`,\n    left: 'center',\n    textStyle: { color: '#E0E0E0', fontSize: 16 },\n    subtextStyle: { color: '#A0A0A0' }\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'line' },\n    formatter: function (params) {\n      let date = new Date(params[0].axisValue).toLocaleDateString('pt-BR');\n      let tooltipHtml = `${date}<br/>`;\n      const pointIndex = params[0].dataIndex;\n\n      tooltipHtml += `<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${forecastColor};\"></span>`;\n      tooltipHtml += `Lucro Previsto: <b>R$ ${predictedValues[pointIndex].toFixed(2)}</b><br/>`;\n      tooltipHtml += `<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${referenceColor};\"></span>`;\n      tooltipHtml += `Último Real: R$ ${lastActualProfit.toFixed(2)}<br/>`;\n      tooltipHtml += `<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:rgba(34, 197, 94, 0.5);\"></span>`;\n      tooltipHtml += `Intervalo: R$ ${lowerValues[pointIndex].toFixed(2)} - R$ ${upperValues[pointIndex].toFixed(2)}`;\n\n      return tooltipHtml;\n    }\n  },\n  legend: {\n    data: ['Lucro Previsto', 'Último Lucro Real', 'Intervalo de Confiança'],\n    bottom: 10,\n    textStyle: { color: '#ccc' }\n  },\n  grid: { left: '3%', right: '4%', top: '20%', bottom: '15%', containLabel: true },\n  xAxis: { type: 'time', axisLabel: { color: '#ccc' } },\n  yAxis: {\n    type: 'value',\n    name: 'Valor (R$)',\n    scale: true,\n    axisLabel: { color: '#ccc', formatter: 'R$ {value}' }\n  },\n  series: [\n    confidenceBaseSeries,\n    confidenceAreaSeries,\n    referenceLineSeries,\n    predictionSeries\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "7.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  forecast_date,\r\n  predicted_net_profit AS \"Lucro Previsto\",\r\n  lower_bound AS \"Limite Inferior\",\r\n  upper_bound AS \"Limite Superior\"\r\nFROM profitforecast\r\nWHERE forecast_date >= NOW()\r\nORDER BY forecast_date;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "fitcore_postgres_ds"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\r\n  net_profit\r\nFROM profit\r\nORDER BY period_end DESC\r\nLIMIT 1;\r\n",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": "1m",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now/y",
    "to": "now/y"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Dashboard Financeiro",
  "uid": "aeu0aqmon588wc",
  "version": 1,
  "weekStart": ""
}